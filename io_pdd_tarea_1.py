# -*- coding: utf-8 -*-
"""Io pdd tarea 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TJOvYHSR2OKlLJ52gnFyO8WrtVtr6RZq
"""

import sys

def dijkstra(graph, start):
    # Inicializar el diccionario de distancias
    distances = {node: float('inf') for node in graph}
    distances[start] = 0

    # Inicializar el conjunto de nodos no visitados
    unvisited = set(graph)

    while unvisited:
        # Seleccionar el nodo con la menor distancia actual
        current = min(unvisited, key=lambda node: distances[node])

        # Remover el nodo actual del conjunto de no visitados
        unvisited.remove(current)

        # Actualizar las distancias de los nodos adyacentes
        for neighbor, cost in graph[current].items():
            new_cost = distances[current] + cost
            if new_cost < distances[neighbor]:
                distances[neighbor] = new_cost

    return distances

# Ejemplo de uso
graph = {
    '1': {'2': 6, '3': 8, '4': 7},
    '2': {'5': 9},
    '3': {'5': 6,'6': 6, '7': 16, '8': 10},
    '4': {'6': 5, '8': 11},
    '5': {'9': 4, '10': 4},
    '6': {'9': 4,},
    '7': {'9': 4,'11': 2},
    '8': {'10': 1, '11': 5,},
    '9': {'12': 8},
    '10': {'12': 7},
    '11': {'12': 3},
    '12': {}
    
}
start = '1'
distances = dijkstra(graph, start)
print(distances)

"""\En este caso, la ruta mÃ¡s corta desde 1 hasta 12 es 1 -> 4 -> 6 -> 9 -> 12, y el costo optimo es de 24 dolares

"""